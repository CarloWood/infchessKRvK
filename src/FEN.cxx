#include "sys.h"
#include "Board.h"

#include <array>

// Generated by gemini 2.5 Pro.

/**
 * @brief Generates the FEN (Forsyth-Edwards Notation) string for a 3-piece position.
 *
 * FEN has 6 fields:
 * 1. Piece Placement: From rank 8 to 1, separated by '/'. Uppercase for white, lowercase for black.
 *    Numbers represent consecutive empty squares.
 * 2. Active Color: 'w' for white to move, 'b' for black. We assume 'w'.
 * 3. Castling Availability: '-' since castling rights are not applicable.
 * 4. En Passant Target Square: '-' since there are no pawns.
 * 5. Halfmove Clock: Number of moves since last capture or pawn advance. We assume 0.
 * 6. Fullmove Number: The number of the full move. We assume 1.
 *
 * @param white_king The position of the white king.
 * @param black_king The position of the black king.
 * @param white_rook The position of the white rook.
 * @return std::string The FEN code for the position.
 * @throws std::out_of_range If a piece is placed outside the 8x8 board.
 * @throws std::logic_error If two or more pieces occupy the same square.
 */
std::string Board::to_fen() const
{
  Square const& black_king = bK_.pos();
  Square const& white_king = wK_.pos();
  Square const& white_rook = wR_.pos();

  // 1. Create an internal representation of the 8x8 board.
  // We initialize it with a character representing an empty square (' ').
  std::array<std::array<char, 8>, 8> board;
  for (auto& row : board)
    row.fill(' ');

  // Helper lambda to place a piece on the board with validation.
  auto place_piece = [&](Square const& s, char piece_char)
  {
    // Validate coordinates are within the 8x8 board.
    if (s.m < 0 || s.m >= 8 || s.n < 0 || s.n >= 8)
      throw std::out_of_range("Piece coordinates are outside the board.");
    board[s.m][s.n] = piece_char;
  };

  // 2. Place the three pieces on our board representation.
  place_piece(white_king, 'K');
  place_piece(black_king, 'k');
  place_piece(white_rook, 'R');

  // 3. Build the piece-placement part of the FEN string.
  std::stringstream fen_stream;
  for (int m = 0; m < 8; ++m)
  {
    int empty_square_count = 0;
    for (int n = 0; n < 8; ++n)
    {
      char piece = board[m][n];
      if (piece == ' ')
        ++empty_square_count;
      else
      {
        // If we have counted empty squares, append the count first.
        if (empty_square_count > 0)
        {
          fen_stream << empty_square_count;
          empty_square_count = 0;
        }
        fen_stream << piece;
      }
    }
    // Append count for any trailing empty squares in the rank.
    if (empty_square_count > 0)
      fen_stream << empty_square_count;
    // Add the rank separator '/', except for the last rank.
    if (m < 7)
      fen_stream << '/';
  }

  // 4. Append the other FEN fields with standard default values.
  // Format: [pieces] [active] [castling] [en passant] [halfmove] [fullmove]
  fen_stream << " " << (to_play_ == white ? 'w' : 'b') << " - - 0 1";

  return fen_stream.str();
}
